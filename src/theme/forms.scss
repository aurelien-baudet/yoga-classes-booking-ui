@import "variables";
@import "icons-utils";

form {
  background: value($forms, "background");
  padding: value($forms, "layout.padding");

  ion-item.item {
    font-size: value($forms, "font-size");
    margin: value($forms, "layout.space-between") 0;
    --background: none;
    --full-highlight-height: 0;
    --padding-start: 0;
    --inner-padding-end: 0;
    --border-width: 0;
    --inner-border-width: 0;
    position: relative;
    overflow: visible;

    &.item-label {
      ion-label {
        --color: #{value($labels, "color")};
        font-weight: bold;
      }

      ion-toggle + ion-label {
        --color: #{value($checkboxes, "label.color")};
        font-size: value($checkboxes, "label.font-size");
      }
    }

    &.item-input {
      > ion-icon {
        display: none;
      }
  
      ion-label {
        align-self: center;
        z-index: 5;

        &.label-floating {
          transform-origin: center top;
          transform: translate3d(0,  value($labels, "animation.empty.y"),  0);
        }

      }
      &.item-has-focus, 
      &.item-has-placeholder, 
      &.item-has-value {
        ion-label.label-floating {
          transform: translate3d(0, value($labels, "animation.filled.y"),  0) scale(0.85);
        }
      }

      ion-input {
        border: value($inputs, "border");
        border-radius: value($inputs, "border-radius");
        --padding-start: 0;
        --padding-end: 0;
        --padding-top: #{value($inputs, "padding", "top")};
        --padding-bottom: #{value($inputs, "padding", "bottom")};
        padding-left: value($inputs, "padding", "left") !important;
        padding-right: value($inputs, "padding", "right") !important;
        background: value($inputs, "background");
      }
      ion-textarea {
        border: value($textareas, "border");
        border-radius: value($textareas, "border-radius");
        --padding-start: #{value($textareas, "padding", "start")};
        --padding-end: #{value($textareas, "padding", "end")};
        --padding-top: #{value($textareas, "padding", "top")};
        --padding-bottom: #{value($textareas, "padding", "bottom")};
        background: value($textareas, "background");
        margin-top: 0;
        min-height: value($textareas, "min-height");
        
        .textarea-wrapper {
          height: 100%;
          border-radius: value($textareas, "border-radius");
          overflow: hidden;
        }

        textarea {
          height: 100%;
        }
      }
    }

    app-help-button {
      position: absolute;
      right: value($forms, "layout.help.position.right");
      margin: 0;
    }
  }

  .validation-errors,
  .response-errors {
    // FIXME: display correctly when several error messages or several lines
    color: value($forms, "errors.color");
    font-size: value($forms, "errors.font-size");
    font-weight: bold;
    text-align: center;
    width: 100%;
  }

  .validation-errors {
    padding: value($forms, "layout.validation.padding");
    min-height: value($forms, "layout.validation.min-height");
    overflow: hidden;
    
    // animation
    > div {
      transform: translate3d(0, -30px, 0);
      transition: transform 0.3s linear;
    }
    &.invalid,
    &.has-errors {
      > div {
        opacity: 1;
        transform: translate3d(0, 0, 0);
      }
    }
  }

  .response-errors {
    margin: value($forms, "layout.response.margin");
    min-height: value($forms, "layout.response.min-height");
  }
}

